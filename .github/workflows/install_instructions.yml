name: Test install instructions

on:
  push:
  schedule:
    - cron: '5 16 * * *'

jobs:
  install:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Arch Linux
          - container: archlinux:latest
            # using `--noconfirm` in CI-only
            run: |-
              pacman --noconfirm -Syu python python-pip git jre11-openjdk-headless base-devel

          # CentOS
          - container: centos:7
            # End of Full Updates - Q4 2020
            # using `.profile` over `.bashrc` in CI-only
            run: |-
              yum -y groupinstall development
              yum -y install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel \
                openssl-devel xz xz-devel tk-devel libffi-devel findutils java-11-openjdk-headless
              yum -y install centos-release-scl
              yum -y install devtoolset-8-gcc devtoolset-8-gcc-c++
              echo "source scl_source enable devtoolset-8" >> ~/.profile

              yum -y install https://repo.ius.io/ius-release-el7.rpm
              yum -y install yum-plugin-replace
              yum -y replace git --replace-with git224
            use_pyenv: true
          - container: centos:8
            # End of Full Updates - 2024-05
            run: |-
              yum -y install epel-release
              yum -y update
              yum -y groupinstall development
              yum -y install git zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel \
                openssl-devel xz xz-devel tk-devel libffi-devel findutils java-11-openjdk-headless
            use_pyenv: true

          # Debian
          - container: debian:stretch
            # EOL ~2020
            run: |-
              echo "deb http://deb.debian.org/debian stretch-backports main" >> /etc/apt/sources.list.d/red-sources.list
              apt update
              apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
                libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless
              CXX=/usr/bin/g++
            use_pyenv: true
          - container: debian:buster
            # EOL ~2022
            run: |-
              apt update
              apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
                libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless
              CXX=/usr/bin/g++
            use_pyenv: true

          # Fedora
          - container: fedora:30
            # End of Life - 2020-05-26
            run: |-
              dnf -y install python38 git java-11-openjdk-headless @development-tools
          - container: fedora:31
            # End of Life - 2020-11-17
            run: |-
              dnf -y install python38 git java-11-openjdk-headless @development-tools
          - container: fedora:32
            # End of Life - 2021-05-18
            run: |-
              dnf -y install python38 git java-11-openjdk-headless @development-tools

          # openSUSE
          - container: opensuse/leap:15.1
            # End of Life (planned) - 2020-11-30
            run: |-
              source /etc/os-release
              zypper -n ar -f https://download.opensuse.org/repositories/home:/Rotkraut:/Opt-Python/openSUSE_Leap_${VERSION_ID}/ Opt-Python
              zypper -n --gpg-auto-import-keys ref

              zypper -n install opt-python38 opt-python38-setuptools git-core java-11-openjdk-headless
              zypper -n install -t pattern devel_basis

              echo 'export PATH="/opt/python/bin:$PATH"' | tee /etc/profile.d/opt-python.sh
              source /etc/profile.d/opt-python.sh

              /opt/python/bin/easy_install-3.8 pip
          - container: opensuse/tumbleweed:latest
            run: |-
              zypper -n install python3-base python3-pip git-core java-11-openjdk-headless
              zypper -n install -t pattern devel_basis

          # Ubuntu
          - container: ubuntu:16.04
            # End of Standard Support - 2021-04-21
            run: |-
              apt update
              apt -y install software-properties-common
              add-apt-repository -yu ppa:openjdk-r/ppa

              add-apt-repository -yu ppa:git-core/ppa

              add-apt-repository -yu ppa:deadsnakes/ppa

              apt -y install python3.8 python3.8-dev python3.8-venv python3-pip git openjdk-11-jre-headless \
                build-essential
          - container: ubuntu:18.04
            # End of Standard Support - 2023-04-26
            run: |-
              apt update
              apt -y install software-properties-common
              add-apt-repository -y ppa:git-core/ppa

              add-apt-repository -y ppa:deadsnakes/ppa

              apt -y install python3.8 python3.8-dev python3.8-venv python3-pip git openjdk-11-jre-headless \
                build-essential
          - container: ubuntu:20.04
            # End of Standard Support - 2025-04-23
            run: |-
              apt update
              apt -y install software-properties-common
              add-apt-repository -y ppa:git-core/ppa

              apt -y install python3.8 python3.8-dev python3.8-venv python3-pip git openjdk-11-jre-headless \
                build-essential
          - container: ubuntu:19.10
            # Latest non-LTS Ubuntu
            # End of Life - 2020-07-17
            run: |-
              apt update
              apt -y install software-properties-common
              add-apt-repository -yu ppa:git-core/ppa

              apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
                libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev \
                libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless
              CXX=/usr/bin/g++
            use_pyenv: true

          # Windows
          - os: windows-latest
            run: |-
              Set-ExecutionPolicy Bypass -Scope Process -Force
              iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
              choco upgrade git --params "/GitOnlyOnPath /WindowsTerminal" -y
              choco upgrade visualstudio2019-workload-vctools -y
              choco upgrade python3 -y

              choco upgrade adoptopenjdk11jre -y

          # macOS
          - os: macos-latest
            # using `.bash_profile` over `.profile` in CI-only (see GH-3852)
            run: |-
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

              brew install python@3.8
              echo 'export PATH="/usr/local/opt/python@3.8/bin:$PATH"' >> ~/.bash_profile
              source ~/.bash_profile
              brew install git
              brew cask install adoptopenjdk/openjdk/adoptopenjdk11

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    container: ${{ matrix.container }}
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      # Installing requirements
      - name: Run install instructions (Linux/Mac)
        run: ${{ matrix.run }}
        if: >-
          runner.os != 'Windows'
        shell: bash -leo pipefail {0}

      - name: Run install instructions (Windows)
        run: ${{ matrix.run }}
        if: >-
          runner.os == 'Windows'
        shell: cmd

      - name: Install Python with pyenv
        if: >-
          matrix.use_pyenv
        shell: bash -leo pipefail {0}
        # `echo` commands are CI-only - users have to add those lines on their own
        run: |-
          command -v pyenv && pyenv update || curl https://pyenv.run | bash

          echo 'export PATH="'$HOME'/.pyenv/bin:$PATH"' >> ~/.profile
          echo 'eval "$(pyenv init -)"' >> ~/.profile
          echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.profile
          source ~/.profile

          CONFIGURE_OPTS=--enable-optimizations pyenv install 3.8.3 -v

          pyenv global 3.8.3

      # Making a virtual environment and installing Red
      - name: Make a virtual environment (pyenv virtualenv)
        if: >-
          matrix.use_pyenv
        shell: bash -leo pipefail {0}
        run: |-
          pyenv virtualenv redbot

          pyenv shell redbot

          python -m pip install -U pip setuptools wheel
          python -m pip install -U Red-DiscordBot[postgres]

      - name: Install Red inside venv (Linux/Mac)
        if: >-
          !matrix.use_pyenv && runner.os != 'Windows'
        shell: bash -leo pipefail {0}
        run: |-
          python3.8 -m venv ~/redenv

          source ~/redenv/bin/activate

          python -m pip install -U pip setuptools wheel
          python -m pip install -U Red-DiscordBot[postgres]

      - name: Install Red inside venv (Windows)
        if: >-
          runner.os == 'Windows'
        shell: cmd
        run: |-
          py -3.8 -m venv "%userprofile%\redenv"

          "%userprofile%\redenv\Scripts\activate.bat"

          python -m pip install -U pip setuptools wheel
          python -m pip install -U Red-DiscordBot[postgres]
