env:
  CIRRUS_SHELL: bash -ileo pipefail

install_red_venv39: &INSTALL_RED_VENV39
  install_red_script: |-
    python3.9 -m venv ~/redenv

    source ~/redenv/bin/activate

    python -m pip install -U pip wheel
    python -m pip install -U "$RED_PACKAGE_NAME[postgres]"

    ./check_java_version.py
  test_red_script: |-
    source ~/redenv/bin/activate
    ./run_tests.py
install_red_venv310: &INSTALL_RED_VENV310
  install_red_script: |-
    python3.10 -m venv ~/redenv

    source ~/redenv/bin/activate

    python -m pip install -U pip setuptools wheel
    python -m pip install -U "$RED_PACKAGE_NAME"

    ./check_java_version.py
  test_red_script: |-
    source ~/redenv/bin/activate
    ./run_tests.py
install_red_venv311: &INSTALL_RED_VENV311
  install_red_script: |-
    python3.11 -m venv ~/redenv

    source ~/redenv/bin/activate

    python -m pip install -U pip setuptools wheel
    python -m pip install -U "$RED_PACKAGE_NAME"

    ./check_java_version.py
  test_red_script: |-
    source ~/redenv/bin/activate
    ./run_tests.py
install_pyenv_and_red310: &INSTALL_PYENV_AND_RED310
  install_pyenv_script: |-
    command -v pyenv && pyenv update || curl https://pyenv.run | bash

    profile=$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))
    rcfile=$([ -n "$ZSH_VERSION" ] && echo ~/.zshrc || echo ~/.bashrc)
    printf '%s\n%s\n%s\n' 'export PYENV_ROOT="$HOME/.pyenv"' 'export PATH="$PYENV_ROOT/bin:$PATH"' "$([ -f "$profile" ] && cat "$profile")" > "$profile"
    echo 'eval "$(pyenv init --path)"' >> "$profile"
    echo 'eval "$(pyenv init -)"' >> "$rcfile"
    echo 'eval "$(pyenv virtualenv-init -)"' >> "$rcfile"
  install_python_with_pyenv_script: |-
    CONFIGURE_OPTS=--enable-optimizations pyenv install 3.10.12 -v

    pyenv global 3.10.12
  install_red_script: |-
    pyenv virtualenv redbot

    pyenv shell redbot

    python -m pip install -U pip wheel
    python -m pip install -U "$RED_PACKAGE_NAME[postgres]"

    ./check_java_version.py
  test_red_script: |-
    pyenv shell redbot
    ./run_tests.py
install_pyenv_and_red39: &INSTALL_PYENV_AND_RED39
  install_pyenv_script: |-
    command -v pyenv && pyenv update || curl https://pyenv.run | bash

    profile=$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))
    rcfile=$([ -n "$ZSH_VERSION" ] && echo ~/.zshrc || echo ~/.bashrc)
    printf '%s\n%s\n%s\n' 'export PYENV_ROOT="$HOME/.pyenv"' 'export PATH="$PYENV_ROOT/bin:$PATH"' "$([ -f "$profile" ] && cat "$profile")" > "$profile"
    echo 'eval "$(pyenv init --path)"' >> "$profile"
    echo 'eval "$(pyenv init -)"' >> "$rcfile"
    echo 'eval "$(pyenv virtualenv-init -)"' >> "$rcfile"
  install_python_with_pyenv_script: |-
    CONFIGURE_OPTS=--enable-optimizations pyenv install 3.9.17 -v

    pyenv global 3.9.17
  install_red_script: |-
    pyenv virtualenv redbot

    pyenv shell redbot

    python -m pip install -U pip wheel
    python -m pip install -U "$RED_PACKAGE_NAME[postgres]"

    ./check_java_version.py
  test_red_script: |-
    pyenv shell redbot
    ./run_tests.py

install_red_on_rhel8_derivatives: &INSTALL_RED_ON_RHEL8_DERIVATIVES
  install_instructions_script: |-
    sudo dnf -y update
    sudo dnf -y group install development
    sudo dnf -y install python39 python39-devel java-17-openjdk-headless nano git

    sudo alternatives --set java "java-17-openjdk.$(uname -i)"
  <<: *INSTALL_RED_VENV39
install_red_on_rhel9_derivatives: &INSTALL_RED_ON_RHEL9_DERIVATIVES
  install_instructions_script: |-
    sudo dnf -y install python39 python3-devel git java-17-openjdk-headless @development nano
  <<: *INSTALL_RED_VENV39
install_red_on_opensuse_leap_15: &INSTALL_RED_ON_OPENSUSE_LEAP_15
  install_instructions_script: |-
    sudo zypper -n install python310 python310-devel git-core java-17-openjdk-headless nano
    sudo zypper -n install -t pattern devel_basis
  <<: *INSTALL_RED_VENV310
install_red_on_fedora: &INSTALL_RED_ON_FEDORA
  install_instructions_script: |-
    sudo dnf -y install python3.11 python3.11-devel git java-17-openjdk-headless @development-tools nano
  <<: *INSTALL_RED_VENV311
install_red_on_macos: &INSTALL_RED_ON_MACOS
  install_instructions_script: |-
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    brew_location="$([ -n "$HOMEBREW_PREFIX" ] && echo "$HOMEBREW_PREFIX" || ([ "$(/usr/bin/uname -m)" = "arm64" ] && echo /opt/homebrew || echo /usr/local))/bin/brew"
    printf '\neval "$(%s shellenv)"\n' "$brew_location" >> "$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))"
    eval "$("$brew_location" shellenv)"

    brew install python@3.11
    brew install git
    brew tap homebrew/cask-versions
    brew install --cask temurin17

    echo 'export PATH="$(brew --prefix)/opt/python@3.11/bin:$PATH"' >> "$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))"
    export PATH="$(brew --prefix)/opt/python@3.11/bin:$PATH"
  <<: *INSTALL_RED_VENV311


macos_monterey_task:
  macos_instance:
    # this is using xcode image due to low free disk space on monterey vanilla image
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
  <<: *INSTALL_RED_ON_MACOS
macos_ventura_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
  <<: *INSTALL_RED_ON_MACOS
macos_sonoma_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-sonoma-vanilla:latest
  <<: *INSTALL_RED_ON_MACOS

windows_task:
  compute_engine_instance:
    image_project: windows-cloud
    image: family/windows-2022-core
    platform: windows
  env:
    CIRRUS_SHELL: cmd.exe
  install_instructions_script:
    - powershell -File windows_install_instructions.ps1
  # Exit code detection in Windows cmd scripts only works when using a list.
  # The list of a single script instruction is still put in a single .cmd file
  # so all commands on a single list run in the same environment.
  refresh_path_script:
    - C:\ProgramData\chocolatey\bin\RefreshEnv.cmd
    - echo PATH=%PATH% >> "%CIRRUS_ENV%"
  install_red_script:
    - py -3.11 -m venv "%userprofile%\redenv"

    - '"%userprofile%\redenv\Scripts\activate.bat"'

    - python -m pip install -U pip wheel
    - python -m pip install -U "%RED_PACKAGE_NAME%[postgres]"
  test_red_script:
    - '"%userprofile%\redenv\Scripts\activate.bat"'
    - python ./check_java_version.py
    - python ./run_tests.py

almalinux_8_task:
  compute_engine_instance:
    image_project: almalinux-cloud
    image: family/almalinux-8
    cpu: 1
    memory: 2G
  add_new_almalinux_8_key_script: |-
    sudo rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
almalinux_9_task:
  compute_engine_instance:
    image_project: almalinux-cloud
    image: family/almalinux-9
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

archlinux_task:
  container:
    image: archlinux:latest
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    pacman --noconfirm -Syu sudo
  # makepkg can't be ran as root so we need to create builduser first
  create_builduser_script: |-
    useradd builduser -m
    passwd -d builduser
    printf 'builduser ALL=(ALL) ALL\n' | tee -a /etc/sudoers
  install_instructions_script: |-
    sudo pacman --noconfirm -Syu git jre17-openjdk-headless base-devel nano

    sudo -u builduser git clone https://aur.archlinux.org/python310.git /tmp/python310
    cd /tmp/python310
    sudo -u builduser makepkg --noconfirm -sicL
    cd -
    rm -rf /tmp/python310
  <<: *INSTALL_RED_VENV310

centos_7_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-7
    cpu: 1
    memory: 2G
  env:
    HOME: /root
    EXPECTED_JAVA_VERSION: 11
  install_instructions_script: |-
    sudo yum -y groupinstall development
    sudo yum -y install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel tk-devel libffi-devel findutils java-11-openjdk-headless nano

    sudo yum -y install centos-release-scl
    sudo yum -y install devtoolset-8-gcc devtoolset-8-gcc-c++
    echo "source scl_source enable devtoolset-8" >> ~/.bashrc
    # this fails? but it's going to run later anyway and then it works...
    #
    # source ~/.bashrc

    sudo yum -y install https://repo.ius.io/ius-release-el7.rpm
    sudo yum -y swap git git236
  <<: *INSTALL_PYENV_AND_RED39

centos_stream_8_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-stream-8
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
centos_stream_9_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-stream-9
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

debian_11_bullseye_task:
  compute_engine_instance:
    image_project: debian-cloud
    image: family/debian-11
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
debian_12_bookworm_task:
  compute_engine_instance:
    image_project: debian-cloud
    image: family/debian-12
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV311

fedora_38_task:
  compute_engine_instance:
    image_project: fedora-cloud
    image: family/fedora-cloud-38
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_FEDORA
fedora_39_task:
  compute_engine_instance:
    image_project: fedora-cloud
    image: family/fedora-cloud-39
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_FEDORA

opensuse_leap_15_5_task:
  compute_engine_instance:
    image_project: opensuse-cloud
    image: family/opensuse-leap
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_OPENSUSE_LEAP_15
opensuse_tumbleweed_task:
  container:
    image: opensuse/tumbleweed:latest
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    zypper -n install sudo
  install_instructions_script: |-
    sudo zypper -n install python311 python311-devel git-core java-17-openjdk-headless nano
    sudo zypper -n install -t pattern devel_basis
  <<: *INSTALL_RED_VENV311

oracle_linux_8_task:
  container:
    image: oraclelinux:8
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    dnf -y install sudo
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
oracle_linux_9_task:
  container:
    image: oraclelinux:9
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    dnf -y install sudo
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

raspberry_pi_os_11_aarch64_task:
  arm_container:
    image: lpenz/rpios-bullseye-arm64
    cpu: 1
    memory: 1G
  install_sudo_script: |-
    apt update
    apt -y install sudo
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
raspberry_pi_os_12_aarch64_task:
  arm_container:
    image: lpenz/rpios-bookworm-arm64
    cpu: 1
    memory: 1G
  install_sudo_script: |-
    apt update
    apt -y install sudo
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV311

rocky_linux_8_task:
  compute_engine_instance:
    image_project: rocky-linux-cloud
    image: family/rocky-linux-8
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
rocky_linux_9_task:
  compute_engine_instance:
    image_project: rocky-linux-cloud
    image: family/rocky-linux-9
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

ubuntu_2004_focal_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2004-lts
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3.9 python3.9-dev python3.9-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
ubuntu_2204_jammy_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2204-lts
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3.10 python3.10-dev python3.10-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV310
ubuntu_devel_task:
  container:
    image: ubuntu:devel
    cpu: 1
    memory: 2G
  add_global_environment_script: |-
    echo 'DEBIAN_FRONTEND=noninteractive' >> /etc/environment
    echo 'TZ=Etc/UTC' >> /etc/environment
  install_sudo_script: |-
    apt update
    apt -y install sudo
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3.11 python3.11-dev python3.11-venv git openjdk-17-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV311
